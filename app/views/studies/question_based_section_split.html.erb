<div class='tab-div'>
	<div id="extraction-form-split-left">
	    <br/>
	    <h2><%= @data[:page_title] %></h2><br/><br/>

	    <%= form_for(@data_point, :remote => true) do |f| %>
	        <%= f.hidden_field :study_id, :value=>@study.nil? ? params[:study_id] : @study.id %>
	        <%= f.hidden_field :extraction_form_id, :value=> @extraction_form.nil? ? params[:extraction_form_id] : @extraction_form.id %>
	        <%= f.hidden_field :form_type, :value => 'split' %>
	        <%= f.hidden_field :document_id, :value => @document_id %>
	
	        <%= render :partial=>'ef_instruction' %>
	        <% questions = @data[:questions] %>

	        <table class='list_table tab-list-table' style='margin-left:0px;'> 
		        <% section_name_for_comments = "#{@data[:model].gsub('_','')}s" %>
		        <% field_name_for_comments = "#{@data[:model].split("_").first.singularize}" %>
		        <% questions.each do |question| %> 
		            <tr>
			            <td class='data' style='min-width:450px; max-width:950px;'>
				            <%= raw(create_title(question[:q_num], question[:q_quest])) %>
				            <br />
				            <div style='min-width:450px; max-width:950px !important; overflow:auto;'>
                            <%= raw(include_instruction(question)) %>
                            <br />
					        <% if ['radio','checkbox','yesno'].include?(question[:q_type]) %>
						        <%= raw(build_multi_choice(question, @data[:model])) %>

					        <% elsif question[:q_type] == 'select' %>
						        <%= raw(build_dropdown(question, @data[:model])) %>

					        <% elsif question[:q_type] == 'text' %>
						        <%= raw(build_text(question, @data[:model], 66)) %>
                                <button type="button" class="daa-text-capture">Capture text</button>

                            <% elsif question[:q_type] == 'multi_text' %>
                            	<%= raw(build_multi_text(question, @data[:model])) %>
                                <button type="button" class="daa-text-capture">Capture text</button>

					        <% else %>
						        <%= raw(build_matrix(question, @data[:model])) %>

					        <% end %>

					        <br style='clear:both;'/>
					        <br />
					            <div style='font-size:12px;'>
						            <%= render :partial => "comments/comments_link", :locals => {:section_name => section_name_for_comments, :section_id => question[:q_id], :field_name => "#{field_name_for_comments}", :study_id => session[:study_id], :project_id => session[:project_id], :num_comments=>question[:q_num_comments], :num_flags=>question[:q_num_flags]} %>	
					            </div>
				            </div><!-- end overflow div -->
			            </td>
		            </tr>
		        <% end %>
	        </table>

		    <button type="submit" class="saving" data-disable-with="<%= ajax_wait_msg %>">
			    <%= image_tag "Accept.png", :alt => "Accept" %>Save Data
		    </button>
		    <div class="saved" id="saved_indicator_1" style='display:none;'>  
			    Saved Successfully <%= image_tag 'Accept.png', :alt => "Accept"  %>
		    </div>
	        <!--<div id="design_detail_fields_table">-->
	        <%# render 'design_detail_data_points/table' %>
	        <!--</div>-->
	        <br/>
	        <br/>
	        <% 
		        # DUMB HARD-CODING OF SECTION NAME FOR THE COMPLETION STATUS 
		        sctn = case @data[:model]
			        when "design_detail" then "design"
			        when "baseline_characteristic" then "baselines"
			        when "outcome_detail" then "outcome_details"
			        when "arm_detail" then "arm_details"
                    when "quality_detail" then "quality_details"
                    when "diagnostic_test_detail" then "diagnostic_test_details"
		        end
	        %>

	        <%= render :partial=>'section_complete_status', :locals=>{:section=>sctn} %>
	        <br/>
	        <br/>
	        <%#= render :partial=>'extraction_forms/back_and_continue_buttons_modal' %>

	        <%= render 'shared/make_editable_and_confirm' %>
	    <% end %><!-- end form_for -->
	</div><!-- end #extraction-form-split-left -->




    <div id="extraction-form-split-right">
    	<%= raw @document_html %>
    </div><!-- end #extraction-form-split-right -->




</div><!-- end .tab-div -->

<script type="text/javascript">
    if (!Array.prototype.includes) {
        Array.prototype.includes = function(searchElement /*, fromIndex*/ ) {
            'use strict';
            var O = Object(this);
            var len = parseInt(O.length) || 0;
            if (len === 0) {
            return false;
        }
        var n = parseInt(arguments[1]) || 0;
        var k;
        if (n >= 0) {
            k = n;
        } else {
            k = len + n;
        if (k < 0) {k = 0;}
        }
        var currentElement;
        while (k < len) {
            currentElement = O[k];
            if (searchElement === currentElement ||
               (searchElement !== searchElement && currentElement !== currentElement)) {
                    return true;
                }
                k++;
            }
            return false;
        };
    }

 	// Taken from http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/
	function findAndReplace(searchText, replacement, searchNode) {
	    if (!searchText || typeof replacement === 'undefined') {
	        // Throw error here if you want...
	        return;
	    }
	    var regex = typeof searchText === 'string' ?
	                new RegExp(searchText, 'g') : searchText,
	        childNodes = (searchNode || document.body).childNodes,
	        cnLength = childNodes.length,
	        excludes = 'html,head,style,title,link,meta,script,object,iframe';
	    while (cnLength--) {
	        var currentNode = childNodes[cnLength];
	        if (currentNode.nodeType === 1 &&
	            (excludes + ',').indexOf(currentNode.nodeName.toLowerCase() + ',') === -1) {
	            arguments.callee(searchText, replacement, currentNode);
	        }
	        if (currentNode.nodeType !== 3 || !regex.test(currentNode.data) ) {
	            continue;
	        }
	        var parent = currentNode.parentNode,
	            frag = (function(){
	                var html = currentNode.data.replace(regex, replacement),
	                    wrap = document.createElement('div'),
	                    frag = document.createDocumentFragment();
	                wrap.innerHTML = html;
	                while (wrap.firstChild) {
	                    frag.appendChild(wrap.firstChild);
	                }
	                return frag;
	            })();
	        parent.insertBefore(frag, currentNode);
	        parent.removeChild(currentNode);
	    }
	}

	// Can wrap a substring.
	function wrapText(text, startIdx, endIdx, wrapper) {
		// Assign default value to wrapper.
  		wrapper = typeof wrapper !== 'undefined' ? wrapper : 'b';

  		var wrapped = text.slice(0, startIdx) + '<' + wrapper + ' style="background: yellow;">' + text.slice(startIdx, endIdx) + '</' + wrapper + '>' + text.slice(endIdx);
  		return wrapped;
	}

	// Mark up the text.
	function magicMark(daaDocumentDomElement, selection, wrapper) {
        var anchorNode = selection.anchorNode;  // This is where the selection starts and could be one of several things.
        var anchorNodeType = anchorNode.nodeType;  // 1=ELEMENT_NODE, 3=TEXT_NODE
        if (anchorNodeType === 1) { var anchorNodeValue = anchorNode.textContent; }
        if (anchorNodeType === 3) { var anchorNodeValue = anchorNode.wholeText; }
        var anchorOffset = selection.anchorOffset;  // At what index the selection starts -- if at the beginning then this should be 0.

        var focusNode = selection.focusNode;  // This is where the selection ends.
        var focusNodeType = focusNode.nodeType;  // 1=ELEMENT_NODE, 3=TEXT_NODE
        if (focusNodeType === 1) { var focusNodeValue = focusNode.textContent; }
        if (focusNodeType === 3) { var focusNodeValue = focusNode.wholeText; }
        var focusOffset = selection.focusOffset;  // At what index the selection ends.

        var logMsg  = "\n";
            logMsg += "anchorNodeType: " + anchorNodeType + "\n";
            logMsg += "anchorNodeValue: " + anchorNodeValue + "\n";
            logMsg += "anchorOffset: " + anchorOffset + "\n";
            logMsg += "focusNodeType: " + focusNodeType + "\n";
            logMsg += "focusNodeValue: " + focusNodeValue + "\n";
            logMsg += "focusOffset: " + focusOffset + "\n";
        console.log(logMsg);

        var keepGoing = true;
        currentInbetweenNode = anchorNode.parentElement.nextElementSibling;
        while (keepGoing) {
            for (var i = currentInbetweenNode.childNodes.length - 1; i >= 0; i--) {
                if (currentInbetweenNode.childNodes[i] === focusNode) {
                    keepGoing = false;
                } else {
                    //console.log(currentInbetweenNode.childNodes[i])
                    textValue = currentInbetweenNode.childNodes[i].textContent;
                    findAndReplace(textValue, wrapText(textValue, 0, textValue.length, wrapper), daaDocumentDomElement);
                }
            }
            currentInbetweenNode = currentInbetweenNode.nextElementSibling;
        }

        // 2 cases:
        //	(1) anchorNode and focusNode are the same and thus all the text is contained in one node.
        //	(2) anchorNode and focusNode are different. This is split into 2 scenarios:
        //		(a) The two nodes are adjacent to each other (easy).
        //		(b) There is a node between the two (hard). We need to find the nodes in between and highlight them as well.
        //  In all cases we need to take a close look at the nodeType and use the offset information accordingly:
        //	nodeType = 3: This means it's a text node...carry on...nothing special.
        //	nodeType = 1: Uh ohh...this is a dom element. We have to assume that the entire element needs to be wrapped.

        // Case (1):
        if (anchorNodeValue === focusNodeValue) {
        	console.log("Case (1): Selection is in the same node.");
        	// If the node type is 3 (text node) then it's a straightforward text replacement using the offset values.
        	if (anchorNodeType === 3) {
        		console.log("TEXT Node");
        		// Does a good job finding the unique location, because we look for the entire anchorNodeValue which is quite unique (not guaranteed to be unique but close).
        		// Bug: For some reason it doubles the '?' at the end of a sentence once...applying multiple searches on the same term to highlight does not repeat this though.
        		findAndReplace(anchorNodeValue, wrapText(anchorNodeValue, anchorOffset, focusOffset, wrapper), daaDocumentDomElement);

        		// Alternative, but not as good. This finds every occurrence of the string we want to highlight.
        		//findAndReplace('(' + anchorNodeValue.slice(anchorOffset, focusOffset) + ')', '<' + wrapper + ' style="background: yellow;">$1</' + wrapper + '>', daaDocumentDomElement);

        	// If the node type is 1 (element node) then the offset doesn't really help. For the anchorNode it will always be 0 and for the focusNode it will always be 1.
        	} else if (anchorNodeType === 1) {
        		console.log("ELEMENT Node");
        		findAndReplace(anchorNodeValue, wrapText(anchorNodeValue, 0, anchorNodeValue.length, wrapper), daaDocumentDomElement);
        	} else {
        		console.log("Ooops...did not properly identify node type.");
        	}

        // Case (2):
        } else {
        	console.log("Case (2): Selection spans multiple nodes.");
        	// If the anchor node type is 3 (text node) then we start at the anchorOffset value but go straight to the end.
        	if (anchorNodeType === 3) {
        		console.log("anchor is a TEXT Node");
        		findAndReplace(anchorNodeValue, wrapText(anchorNodeValue, anchorOffset, anchorNodeValue.length, wrapper), daaDocumentDomElement);
        	} else if (anchorNodeType === 1) {
        		console.log("anchor is an ELEMENT Node");
        		findAndReplace(anchorNodeValue, wrapText(anchorNodeValue, 0, anchorNodeValue.length, wrapper), daaDocumentDomElement);
        	} else {
        		console.log("Ooops...did not properly identify anchor node type.");
        	}

        	// Do the same for the focus node type.
        	if (focusNodeType === 3) {
        		console.log("focus is a TEXT Node");
        		findAndReplace(focusNodeValue, wrapText(focusNodeValue, 0, focusOffset, wrapper), daaDocumentDomElement);
        	} else if (focusNodeType === 1) {
        		console.log("focus is an ELEMENT Node");
        		findAndReplace(focusNodeValue, wrapText(focusNodeValue, 0, focusNodeValue.length, wrapper), daaDocumentDomElement);
        	} else {
        		console.log("Ooops...did not properly identify focus node type.");
        	}

        	// Finally we need to find all the nodes between the anchor and the focus node and wrap them in their entirety.
            console.log("this is my anchor: " + anchorNode.parentElement);
        }
	}

    function getTextNodesBetween(rootNode, startNode, endNode) {
        var pastStartNode = false, reachedEndNode = false, textNodes = [];

        function getTextNodes(node) {
            if (node == startNode) {
                pastStartNode = true;
            } else if (node == endNode) {
                reachedEndNode = true;
            } else if (node.nodeType == 3) {
                if (pastStartNode && !reachedEndNode && !/^\s*$/.test(node.nodeValue)) {
                    textNodes.push(node);
                }
            } else {
                for (var i = 0, len = node.childNodes.length; !reachedEndNode && i < len; ++i) {
                    getTextNodes(node.childNodes[i]);
                }
            }
        }

        getTextNodes(rootNode);
        return textNodes;
    }

    function parents(node) {
        var nodes = [node]
        for (; node; node = node.parentNode) {
            nodes.unshift(node)
        }
        return nodes
    }

    function commonAncestor(node1, node2) {
        var parents1 = parents(node1)
        var parents2 = parents(node2)

        if (parents1[0] != parents2[0]) throw "No common ancestor!"

        for (var i = 0; i < parents1.length; i++) {
            if (parents1[i] != parents2[i]) return parents1[i - 1]
        }
    }

    function highlight(id) {
        var sel = $("." + id);
        sel.css({
            'border-style': 'solid',
            'border-width': '10px'
        })
        $("#page-container").scrollTo(sel, 800);
        //document.getElementById("#" + id).scrollIntoView();
    }

    function unhighlight(id) {
        var sel = $("." + id);
        sel.css({
            'border-style': '',
            'border-width': '0px'
        })
    }

    $(".daa-text-capture").on('click', function(event) {
    	// Collect several pieces of information about the selection. We will attempt to reconstruct this later when
    	// it is time to render with the highlighting.

        // #!!! This is just a stub for the ID
        var seconds = new Date().getTime() / 1000 | 0;
        var curId = seconds.toString();

    	// CONSTANTS
    	var WRAPPER = 'span class=' + curId;

        var s = window.getSelection();

        // Paste the selection into the appropriate textarea field.
        var parent = $(event.target).parent('div')[0],
            newItem = document.createElement("div"),
            textNode = document.createTextNode(s.toString());

        newItem.style.cssText = 'margin: 1px; border-style: solid; border-color: red; border-width: 0.5px';
        newItem.id = "toggle-" + curId;
        newItem.appendChild(textNode);

        parent.insertBefore(newItem, parent.childNodes[0]);
        console.log(parent);

        $("#toggle-" + curId).on('click', function(event) {
            highlight(curId);
        });

        $("#toggle-" + curId).on('mouseout', function(event) {
            unhighlight(curId);
        });

        //$(event.target).
        //$(event.target).closest('div').find('textarea').val(s);

        // Let see if we can't manipulate the DOM directly and send it back to DAA? This might simplify highlighting because
        // we do not need to reconstruct blindly.
        var daaDocumentDomElement = document.getElementById('extraction-form-split-right');
        var daaDocumentHtml = daaDocumentDomElement.innerHTML;
        //console.log(daaDocumentDomElement);
        //console.log(daaDocumentHtml);

        // Let's try to wrap the anchorNode, focusNode and all the div's in-between.
		magicMark(daaDocumentDomElement, s, WRAPPER);
    });

    $('.clear_selection_link').on('click', function(e) {
        var checkboxes = $(this).siblings('input')
        var matrix = $(this).parents('.matrix_question')

        checkboxes.removeClass('edited_field');
        matrix.removeClass('edited_field');
    })

    $('.open_comments_link').bind("click", function(event) {
      var self = $(this);
      var qtip = '.qtip.ui-tooltip';
   
      // Create the tooltip
      self.qtip({
         overwrite: false,
		id: $(this).attr('id'),
				 position:{
		 my: 'top right', at: 'bottom center'
		 },
         content: {
			title: {
                  text: 'Item Comments',
                  button: true
			},
			text: "Loading...",
			ajax: {
				url: 'get_comment_content', 
				type: 'POST',
				data: {
					div_id: $(this).attr('id')
				} 
			}			
         },
         show: {
            event: "click", 
            ready: true, 
            solo:  true
         },
         hide: {
            delay: 100,
            event: 'click',
            fixed: true 
         },
         style: {
            classes: 'ui-tooltip-nav ui-tooltip-light', 
            tip: false,
			width: '600'
         },
         events: {
            // Toggle an active class on each menus activator
            toggle: function(event, api) {
               api.elements.target.toggleClass('active', event.type === 'tooltipshow');
            },
			// make qtip movable on render
		   render: function(event, api) {
			   api.elements.tooltip.draggable();
		   },
		   focus: function(event, api) {
         // make sure this qtip is always on the bottom i.e. below the comment form tooltip
         event.preventDefault();
		}
         }
      });

    $(".editable_field").live('change',function(){
        $(this).addClass('edited_field');
        var form = $(this).parents('form:first');
        form.addClass("unsaved_form");
        $(".unsaved_div").css("display","block");
    });
});
</script>
