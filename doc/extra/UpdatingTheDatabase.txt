# @markup rdoc
# @title Updating the SRDR Database
= Updating the SRDR Database
== Online Reference
The document below is essentially a summary of infromation in the 
Rails Guide for Active Record Migrations found online at 
http://api.rubyonrails.org/classes/ActiveRecord/Migration.html

== Creating Migrations

To create a rails migration, run the command:

  rails g migration [MigrationName]

*example:* rails g migration CreateProjectTable

*result:* rails will create a file in the db/migrations folder named according to your input and formatted as:

  201201312114677_create_project_table.rb

Where the leading sequence of numbers represents a date and time stamp.


== Migration Files

Migration files inherit from ActiveRecord::Migration and are formatted as follows:

  class CreateProjectTable < ActiveRecord::Migration
  	def self.up

  	end
  	def self.down

  	end
  end

To make changes to the database, code must be entered in the 'self.up' function. To reverse a change, code should be added to the self.down function prior to running rake.

== Running Migrations

To run all recent migrations that have yet to be made to the database, run the command:
  rake db:migrate

To run a migration in a specific direction:
  rake db:migrate:up  
or 
  rake db:migrate:down

To undo a migration if, for instance, it fails part-way through:
  rake db:rollback

To run a specific migration:
  run db:migrate VERSION=201201312114677

== Creating a Table Example

  class CreateProjectTable < ActiveRecord::Migration
    def self.up
      create_table :projects do |t|
        t.string :title, :null=>false
        t.string :description, :default=>'Test Project'
        t.integer :creator_id
        t.timestamps
      end
    end
  end


== Changing a Table Example
This works in essentially the same way as creating a table:

  class ChangeProjectTable < ActiveRecord::Migration
  	def self.up
  		change_table :projects do |t|
  			t.string :title, :null=>false
  			t.string :description, :default=>'Test Project'
  			t.integer :creator_id
  			t.timestamps
  		end
  	end
  end

== Changing a Column Example
Change the previously created description field from a string to text 

  class ChangeProjectDescriptionColumn < ActiveRecord::Migration
    def self.up
      change_column :projects, :description, :text
    end
  end

== Other Available Transformations
(This list is straight from the ActiveRecord documentation)

- create_table(name, options): 

Creates a table called name and makes the table object available to a block that can then add columns to it, following the same format as add_column. See example above. The options hash is for fragments like "DEFAULT CHARSET=UTF-8" that are appended to the create table definition.

- drop_table(name): 

Drops the table called name.

- rename_table(old_name,new_name): 

Renames the table called old_name to new_name.

- add_column(table_name,column_name,type,options): 

Adds a new column to the table called table_name named column_name specified to be one of the following types: 

  :string, :text, :integer, :float, :decimal, :datetime, :timestamp, :time, :date, :binary, :boolean. 

A default value can be specified by passing an options hash like { :default => 11 }. Other options include :limit and :null (e.g. { :limit => 50, :null => false }) -- see ActiveRecord::ConnectionAdapters::TableDefinition#column for details.

- rename_column(table_name,column_name,new_column_name): 

Renames a column but keeps the type and content.

- change_column(table_name,column_name,type,options): 

Changes the column to a different type using the same parameters as add_column.

- remove_column(table_name,column_names): 

Removes the column listed in column_names from the table called table_name.

- add_index(table_name,column_names,options): 

Adds a new index with the name of the column. Other options include :name, :unique (e.g. { :name => "users_name_index", :unique => true }) and :order (e.g. { :order => {:name => :desc} }</tt>).

- remove_index(table_name,:column=>column_name): 

Removes the index specified by column_name.

- remove_index(table_name,:name=>index_name): 

Removes the index specified by index_name.


